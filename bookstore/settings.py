"""
Django settings for bookstore project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
import os
import json
from django.utils.translation import gettext_lazy as _


# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# with open('/etc/config.json') as fh:
#     config = json.load(fh)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

AUTH_USER_MODEL = "users.User"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'crsar53cxzqysv8iu15vk%jx-t1396&e60la^39!cm!)1#0%u='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

]
# third parties modules
INSTALLED_APPS += [
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    "bootstrap4",
    'mptt',
    'bootstrap4form'
    # 'django_cleanup'
    # django-bootstrap4 =>bootstrap4

]


# custom apps
INSTALLED_APPS += [
    'users',
    'books',
    'myutils',
    # 'posts',
]

SITE_ID = 1

# mptt admin setting
MPTT_ADMIN_LEVEL_INDENT = 20

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.middlewares.CheckUserIsBanned',
]

ROOT_URLCONF = 'bookstore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',

]

WSGI_APPLICATION = 'bookstore.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# allauth settings
# email or user name; username is mandatory
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_REQUIRED =True
ACCOUNT_EMAIL_VERIFICATION ="optional"  #'mandatory','none'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
LOGIN_REDIRECT_URL = '/' # default None
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS=5
ACCOUNT_EMAIL_SUBJECT_PREFIX = "Greetings from Vlooi Markt"
LOGIN_URL = '/accounts/login'
# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/' default is settings.LOGIN_URL
# (below) redirect when user confirms (form button) email link
# ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'
# in this case after OK email confirm |=> re-direct to '/' (see above)

# email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

########## MT ############################
EMAIL_HOST = os.environ.get("EMAIL_HOST_MT",'not found')
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER_MT",'not found')
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD_MT",'not found')

EMAIL_PORT = '2525'
EMAIL_USE_TLS = True

# EMAIL_HOST = 'smtp.sendgrid.net' #EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = 'apikey'
# EMAIL_HOST_PASSWORD = config.get('EMAIL_HOST_PASSWORD')
# EMAIL_PORT = 587
#EMAIL_HOST_USER = config.get("MY_EMAIL","Not found")
#EMAIL_HOST_PASSWORD = config.get('EMAIL_HOST_PASSWORD',"Not found")



# AWS
# AWS_ACCESS_KEY_ID = config.get("AWS_ACCESS_KEY_ID")
# AWS_SECRET_ACCESS_KEY = config.get("AWS_SECRET_ACCESS_KEY")
# AWS_STORAGE_BUCKET_NAME= config.get("AWS_STORAGE_BUCKET_NAME")
#
# AWS_S3_FILE_OVERWRITE = False
# AWS_DEFAULT_ACL=None
# DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
# AWS_S3_REGION_NAME = "us-west-2"


STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR,'assets')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR,'media')
DATA_UPLOAD_MAX_MEMORY_SIZE = 20*1024*1024

LOGGING = {
    'version': 1,
    # let op: when too set it to True
    # let the dafault loggers(ORM,db ect) be
    'disable_existing_loggers': False,
    'formatters':{
        'console':{
            # 'format':'%(name)s:%(levelname)s:%(message)s'
            'format':'%(name)-12s %(levelname)-8s %(message)s'
        },
        'file':{
            'format':'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'formatter':'file',
            'filename':'check.log',
        },
        'console':{
            'level':'INFO',
            'class':'logging.StreamHandler',
            'formatter':'console'
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
        }
    },
    'loggers': {
        # my custom loggers
        '':{
            'level':'WARNING',
            'handlers':['file']
        }
    }
}